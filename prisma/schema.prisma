generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int        @id @default(autoincrement())
  name            String
  email           String     @unique
  password        String
  role            UserRole   @default(PARTICIPANT)
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  isEmailVerified Boolean    @default(false)
  tokens          Token[]
  createdExams    Exam[]     @relation("ExamCreator")
  userExams       UserExam[]

  @@index([email])
  @@index([role])
  @@map("users")
}

model QuestionBank {
  id            Int            @id @default(autoincrement())
  content       String
  options       Json
  correctAnswer String         @map("correct_answer")
  defaultScore  Int            @default(5) @map("default_score")
  questionType  QuestionType   @default(TIU) @map("question_type")
  createdAt     DateTime       @default(now()) @map("created_at")
  examQuestions ExamQuestion[]

  @@index([questionType])
  @@index([createdAt])
  @@map("question_bank")
}

model Exam {
  id              Int            @id @default(autoincrement())
  title           String
  description     String?
  startTime       DateTime?      @map("start_time")
  endTime         DateTime?      @map("end_time")
  durationMinutes Int?           @map("duration_minutes")
  createdBy       Int            @map("created_by")
  createdAt       DateTime       @default(now()) @map("created_at")
  examQuestions   ExamQuestion[]
  creator         User           @relation("ExamCreator", fields: [createdBy], references: [id])
  userExams       UserExam[]

  @@index([createdBy])
  @@index([startTime])
  @@map("exams")
}

model ExamQuestion {
  id             Int          @id @default(autoincrement())
  examId         Int          @map("exam_id")
  questionId     Int          @map("question_id")
  orderNumber    Int?         @map("order_number")
  answers        Answer[]
  exam           Exam         @relation(fields: [examId], references: [id])
  question       QuestionBank @relation(fields: [questionId], references: [id])

  @@unique([examId, questionId])
  @@index([examId])
  @@index([questionId])
  @@map("exam_questions")
}

model UserExam {
  id               Int               @id @default(autoincrement())
  userId           Int               @map("user_id")
  examId           Int               @map("exam_id")
  startedAt        DateTime?         @map("started_at")
  finishedAt       DateTime?         @map("finished_at")
  totalScore       Int?              @map("total_score")
  status           ExamStatus        @default(IN_PROGRESS)
  createdAt        DateTime          @default(now()) @map("created_at")
  answers          Answer[]
  proctoringEvents ProctoringEvent[]
  exam             Exam              @relation(fields: [examId], references: [id])
  user             User              @relation(fields: [userId], references: [id])

  @@unique([userId, examId])
  @@index([userId])
  @@index([examId])
  @@index([status])
  @@map("user_exams")
}

model Answer {
  id             Int          @id @default(autoincrement())
  userExamId     Int          @map("user_exam_id")
  examQuestionId Int          @map("exam_question_id")
  selectedOption String?      @map("selected_option")
  isCorrect      Boolean?     @map("is_correct")
  answeredAt     DateTime     @default(now()) @map("answered_at")
  examQuestion   ExamQuestion @relation(fields: [examQuestionId], references: [id])
  userExam       UserExam     @relation(fields: [userExamId], references: [id], onDelete: Cascade)

  @@unique([userExamId, examQuestionId])
  @@index([userExamId])
  @@map("answers")
}

model ProctoringEvent {
  id         Int                 @id @default(autoincrement())
  userExamId Int                 @map("user_exam_id")
  eventType  ProctoringEventType @map("event_type")
  eventTime  DateTime            @default(now()) @map("event_time")
  metadata   Json?
  userExam   UserExam            @relation(fields: [userExamId], references: [id], onDelete: Cascade)

  @@index([userExamId])
  @@index([eventType])
  @@index([eventTime])
  @@map("proctoring_events")
}

model Token {
  id          Int       @id @default(autoincrement())
  token       String?
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now()) @map("created_at")
  userId      Int       @map("user_id")
  tokenHash   String
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([tokenHash])
  @@index([type])
}

enum UserRole {
  ADMIN
  PARTICIPANT
}

enum ExamStatus {
  IN_PROGRESS
  FINISHED
  CANCELLED
  TIMEOUT
}

enum QuestionType {
  TIU
  TKP
  TWK
}

enum ProctoringEventType {
  FACE_NOT_DETECTED
  MULTIPLE_FACES
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}
