// Final MVP Database Schema for Tryout System with Real-time Proctoring
// Optimized for prototype development with complete functionality

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core User Management
model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      UserRole @default(PARTICIPANT)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  isEmailVerified  Boolean   @default(false)
  
  // Relations
  tokens       Token[]
  createdExams Exam[]     @relation("ExamCreator")
  userExams    UserExam[]

  @@index([email])
  @@index([role])
  @@map("users")
}

// Question Bank - Core Repository
model QuestionBank {
  id            Int          @id @default(autoincrement())
  content       String
  options       Json         // Structure: {"A": "answer1", "B": "answer2", ...}
  correctAnswer String       @map("correct_answer") // A, B, C, D, or E
  defaultScore  Int          @default(1) @map("default_score")
  questionType  QuestionType @default(TIU) @map("question_type")
  createdAt     DateTime     @default(now()) @map("created_at")
  
  // Relations
  examQuestions ExamQuestion[]
  
  @@index([questionType])
  @@index([createdAt])
  @@map("question_bank")
}

// Exam Configuration
model Exam {
  id              Int       @id @default(autoincrement())
  title           String
  description     String?
  startTime       DateTime? @map("start_time")
  endTime         DateTime? @map("end_time")
  durationMinutes Int?      @map("duration_minutes")
  createdBy       Int       @map("created_by")
  createdAt       DateTime  @default(now()) @map("created_at")
  
  // Relations
  creator       User           @relation("ExamCreator", fields: [createdBy], references: [id])
  examQuestions ExamQuestion[]
  userExams     UserExam[]
  
  @@index([createdBy])
  @@index([startTime])
  @@map("exams")
}

// Question-Exam Junction with Ordering
model ExamQuestion {
  id            Int  @id @default(autoincrement())
  examId        Int  @map("exam_id")
  questionId    Int  @map("question_id")
  orderNumber   Int? @map("order_number")   // Question sequence in exam
  scoreOverride Int? @map("score_override") // Custom score for this exam
  
  // Relations
  exam     Exam         @relation(fields: [examId], references: [id])
  question QuestionBank @relation(fields: [questionId], references: [id])
  answers  Answer[]
  
  @@unique([examId, questionId])
  @@index([examId])
  @@index([questionId])
  @@map("exam_questions")
}

// User Exam Sessions
model UserExam {
  id         Int        @id @default(autoincrement())
  userId     Int        @map("user_id")
  examId     Int        @map("exam_id")
  startedAt  DateTime?  @map("started_at")
  finishedAt DateTime?  @map("finished_at")
  totalScore Int?       @map("total_score")
  status     ExamStatus @default(IN_PROGRESS)
  createdAt  DateTime   @default(now()) @map("created_at")
  
  // Relations
  user             User              @relation(fields: [userId], references: [id])
  exam             Exam              @relation(fields: [examId], references: [id])
  answers          Answer[]
  proctoringEvents ProctoringEvent[] // Real-time proctoring events
  
  @@unique([userId, examId])
  @@index([userId])
  @@index([examId])
  @@index([status])
  @@map("user_exams")
}

// Answer Tracking
model Answer {
  id               Int      @id @default(autoincrement())
  userExamId       Int      @map("user_exam_id")
  examQuestionId   Int      @map("exam_question_id")
  selectedOption   String?  @map("selected_option") // A, B, C, D, E
  isCorrect        Boolean? @map("is_correct")
  answeredAt       DateTime @default(now()) @map("answered_at")
  
  // Relations
  userExam     UserExam     @relation(fields: [userExamId], references: [id], onDelete: Cascade)
  examQuestion ExamQuestion @relation(fields: [examQuestionId], references: [id])
  
  @@unique([userExamId, examQuestionId])
  @@index([userExamId])
  @@map("answers")
}

// Real-time Proctoring Events - Simplified for Camera-Only MVP
model ProctoringEvent {
  id         Int                 @id @default(autoincrement())
  userExamId Int                 @map("user_exam_id")
  eventType  ProctoringEventType @map("event_type")
  eventTime  DateTime            @default(now()) @map("event_time")
  metadata   Json?               // Additional event data from AI detection
  
  // Relations
  userExam UserExam @relation(fields: [userExamId], references: [id], onDelete: Cascade)
  
  @@index([userExamId])
  @@index([eventType])
  @@index([eventTime])
  @@map("proctoring_events")
}

// Authentication Token Management
model Token {
  id          Int       @id @default(autoincrement())
  token       String
  type        TokenType
  expires     DateTime
  blacklisted Boolean
  createdAt   DateTime  @default(now()) @map("created_at")
  userId      Int       @map("user_id")
  
  // Relations
  user User @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([type])
}

// User Roles
enum UserRole {
  ADMIN
  PARTICIPANT
}

// Exam Session Status
enum ExamStatus {
  IN_PROGRESS
  FINISHED
  CANCELLED
  TIMEOUT
}

// Question Categories
enum QuestionType {
  TIU // Tes Intelegensi Umum
  TKP // Tes Karakteristik Pribadi  
  TWK // Tes Wawasan Kebangsaan
}

// Real-time Proctoring Events - Simplified for MVP
enum ProctoringEventType {
  FACE_NOT_DETECTED
  MULTIPLE_FACES
}

// Authentication Token Types
enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}